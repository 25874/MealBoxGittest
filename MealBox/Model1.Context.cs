//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MealBox
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MealBoxesEntities : DbContext
    {
        public MealBoxesEntities()
            : base("name=MealBoxesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountNature> AccountNatures { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Customers_> Customers_ { get; set; }
        public virtual DbSet<Dpos> Dpos { get; set; }
        public virtual DbSet<DPurchase> DPurchases { get; set; }
        public virtual DbSet<DsrStock> DsrStocks { get; set; }
        public virtual DbSet<FootballTeam> FootballTeams { get; set; }
        public virtual DbSet<Head> Heads { get; set; }
        public virtual DbSet<HockeyTeam> HockeyTeams { get; set; }
        public virtual DbSet<Mpos> Mpos { get; set; }
        public virtual DbSet<MPurchase> MPurchases { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<SaleCreadit> SaleCreadits { get; set; }
        public virtual DbSet<Sticker> Stickers { get; set; }
        public virtual DbSet<stockIn> stockIns { get; set; }
        public virtual DbSet<stockOut> stockOuts { get; set; }
        public virtual DbSet<SubHead> SubHeads { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tbl_area> tbl_area { get; set; }
        public virtual DbSet<tbl_bkr> tbl_bkr { get; set; }
        public virtual DbSet<tbl_CashBnk> tbl_CashBnk { get; set; }
        public virtual DbSet<tbl_CB> tbl_CB { get; set; }
        public virtual DbSet<tbl_DSal> tbl_DSal { get; set; }
        public virtual DbSet<tbl_employee> tbl_employee { get; set; }
        public virtual DbSet<tbl_expenses> tbl_expenses { get; set; }
        public virtual DbSet<tbl_HoldDPso> tbl_HoldDPso { get; set; }
        public virtual DbSet<tbl_HoldMPso> tbl_HoldMPso { get; set; }
        public virtual DbSet<tbl_PayTyp> tbl_PayTyp { get; set; }
        public virtual DbSet<tbl_producttype> tbl_producttype { get; set; }
        public virtual DbSet<tbl_Purcredit> tbl_Purcredit { get; set; }
        public virtual DbSet<tbl_User> tbl_User { get; set; }
        public virtual DbSet<tbl_userType> tbl_userType { get; set; }
        public virtual DbSet<tbl_vchtyp> tbl_vchtyp { get; set; }
        public virtual DbSet<tbl_WareHouse> tbl_WareHouse { get; set; }
        public virtual DbSet<tbl_WareHouseInventory> tbl_WareHouseInventory { get; set; }
        public virtual DbSet<VoucherDetail> VoucherDetails { get; set; }
        public virtual DbSet<VoucherMaster> VoucherMasters { get; set; }
        public virtual DbSet<VoucherType> VoucherTypes { get; set; }
        public virtual DbSet<AccountHead> AccountHeads { get; set; }
        public virtual DbSet<tbl_DPos> tbl_DPos { get; set; }
        public virtual DbSet<tbl_MPos> tbl_MPos { get; set; }
        public virtual DbSet<tbl_unts> tbl_unts { get; set; }
        public virtual DbSet<Salereturn> Salereturns { get; set; }
        public virtual DbSet<SalereturnChild> SalereturnChilds { get; set; }
        public virtual DbSet<tbl_Salereturn> tbl_Salereturn { get; set; }
        public virtual DbSet<tbl_SalereturnChild> tbl_SalereturnChild { get; set; }
        public virtual DbSet<tbl_PurchaseReturn> tbl_PurchaseReturn { get; set; }
        public virtual DbSet<tbl_PurchaseReturnChild> tbl_PurchaseReturnChild { get; set; }
        public virtual DbSet<tbl_MSal> tbl_MSal { get; set; }
        public virtual DbSet<tbl_ddsrbk> tbl_ddsrbk { get; set; }
        public virtual DbSet<tbl_Mdsr> tbl_Mdsr { get; set; }
    
        public virtual ObjectResult<SalCreadit_Result> SalCreadit(string customerId)
        {
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalCreadit_Result>("SalCreadit", customerIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Sp_ExpenceRpt_Result> Sp_ExpenceRpt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ExpenceRpt_Result>("Sp_ExpenceRpt");
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Sp_NetProfit_Result> Sp_NetProfit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_NetProfit_Result>("Sp_NetProfit");
        }
    
        public virtual ObjectResult<Sp_PosInvoice_Result> Sp_PosInvoice(Nullable<int> billNo)
        {
            var billNoParameter = billNo.HasValue ?
                new ObjectParameter("billNo", billNo) :
                new ObjectParameter("billNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PosInvoice_Result>("Sp_PosInvoice", billNoParameter);
        }
    
        public virtual ObjectResult<Sp_Profit_Result> Sp_Profit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Profit_Result>("Sp_Profit");
        }
    
        public virtual ObjectResult<Sp_Purchase_Result> Sp_Purchase(string productId, string supplierId)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Purchase_Result>("Sp_Purchase", productIdParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<Sp_PurchaseCreadit_Result> Sp_PurchaseCreadit(string supplierId)
        {
            var supplierIdParameter = supplierId != null ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PurchaseCreadit_Result>("Sp_PurchaseCreadit", supplierIdParameter);
        }
    
        public virtual ObjectResult<Sp_PurchaseInvoice_Result> Sp_PurchaseInvoice(Nullable<int> purchaseId)
        {
            var purchaseIdParameter = purchaseId.HasValue ?
                new ObjectParameter("PurchaseId", purchaseId) :
                new ObjectParameter("PurchaseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PurchaseInvoice_Result>("Sp_PurchaseInvoice", purchaseIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Sp_Sal_Result> Sp_Sal(string productId, string customerId)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            var customerIdParameter = customerId != null ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Sal_Result>("Sp_Sal", productIdParameter, customerIdParameter);
        }
    
        public virtual ObjectResult<Sp_SaleInvoice_Result> Sp_SaleInvoice(Nullable<int> msalNo)
        {
            var msalNoParameter = msalNo.HasValue ?
                new ObjectParameter("MsalNo", msalNo) :
                new ObjectParameter("MsalNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SaleInvoice_Result>("Sp_SaleInvoice", msalNoParameter);
        }
    
        public virtual ObjectResult<Sp_SummaryReport_Result> Sp_SummaryReport(string productId)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_SummaryReport_Result>("Sp_SummaryReport", productIdParameter);
        }
    
        public virtual ObjectResult<Sp_Transation_Result> Sp_Transation(string accountCode, string type, string paymentMethod)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Transation_Result>("Sp_Transation", accountCodeParameter, typeParameter, paymentMethodParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
